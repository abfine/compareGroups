\documentclass[11pt]{article}
%\usepackage[authoryear,round]{natbib}
\usepackage{hyperref}
\usepackage[pdftex]{color,graphicx,epsfig}
\DeclareGraphicsRule{.pdftex}{pdf}{.pdftex}{}
\usepackage{amssymb,amsmath}
\usepackage{multirow}
\usepackage{lscape}
%\usepackage[latin1]{inputenc}



\begin{document}

%\setkeys{Gin}{width=0.99\textwidth}

\title{\bf compareGroups: Descriptives by groups}

\vspace{1cm}

\author{Isaac Subirana\,$^{1,2,3}$, H\'ector Sanz\,$^{2,4}$}


%\VignetteIndexEntry{compareGroups} 


\maketitle


\begin{center}

$^{1}$CIBER Epidemiology and Public Health (CIBERESP)\\
$^{2}$IMIM (Hospital del Mar Research Institute)\\
$^{3}$Statistics Department, University of Barcelona\\
$^{4}$Girona Biomedical Research Institute (IDIBGI)\\ 

\vspace{1cm}

\texttt{isubirana@imim.es}, \texttt{hsanz@imim.es}


\end{center}


\tableofcontents


<<echo=FALSE>>=
options(width=140)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction} \label{section-Introduction}

The package {\tt compareGroups} allows users to perform descriptive of several variables stratifying by groups of a certain variable. In this package, functions and methods have been defined, as well as an easy-to-use GUI. 
This document provides an overview on the usage of the {\tt compareGroups} package by using a real data set.
This data set belongs to a cross-sectional study where a lot of clinical, epidemiological information was collected in different periods (years 1995, 2000 and 2005).  \\

\noindent Start by loading the package \texttt{compareGroups}:

\color{blue}
<<echo=TRUE,results=hide>>=
library(compareGroups)
@
\color{black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{The data} \label{section-The data}


In order to illustrate how to use {\tt compareGroups} package and their functions to build tables and descriptive analysis, we use a data set 
from three cross-sectional surveys of REGICOR study ({\tt www.regicor.org}.
In this data there are a random selection of 30\% of the original sample size, and a subset of variables, since the actual questionnaire is much more extensive and includes hundreds of variables. In this example, there are 20 or 30 variables more less, relating to demographic information such as age and gender, anthropometric data such as body mass index or laboratory markers such as cholesterol, LDL cholesterol, etc.  \\

To load the REGICOR data just type

\color{blue}
<<echo=TRUE>>=
data(regicor)
@
\color{black}


And to visualize the first rows (individuals):

\color{blue}
<<echo=TRUE,eval=FALSE>>=
head(regicor)
@
\color{red}
\tiny
<<echo=FALSE>>=
head(regicor)
@
\color{black}
\normalsize


By performing a 'summary' we can have an idea about the number of missing data, presence of possible outliers, if there are non-desired levels for categorical variables, etc.
It is important to note that 'compareGroups' is not designed to perform quality control of the data. To do so there are other useful package like {\tt r2lh}. It is strongly recommended that the data.frame only contains the variables to analyze and previously remove the ones descarded. Also, the nature of variables should be known, or at least which are the variables to be treated as categorical. For the last ones, it is important to code them as factors, with the order of their levels meaningful.\\

The object 'regicor' is stored as a 'data.frame', with all variables labelled using the function {\tt label} from {\tt Hmisc} package. 
In this way we can have an idea about meaning of the variables. Here, the variable names and their labels are printed in a matrix:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
cbind(names(regicor),as.character(lapply(regicor,label)))
@
\color{red}
\tiny
<<echo=FALSE>>=
cbind(names(regicor),as.character(lapply(regicor,label)))
@
\color{black}
\normalsize


The variable labels will be used in the following sections to print the results.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Using {\tt R} syntax} \label{section-using R syntax}

In {\tt compareGroups} package there are two ways of constructing the descriptives by groups tables: 

\begin{enumerate}
\item by typing the "usual" {\tt R} commands, 
\item or, for users that prefers to avoid typing, we have developed a easy-to-use GUI to construct these tables and setting all the options, etc. 
\end{enumerate}

The second strategy will be explained in section \ref{section-using graphical interface}. \\


In {\tt compareGroups} package there has been implemented several functions, with some generic functions and methods as well. \\


The main function that performs most of the calculations is named identically as the package.\\

Let's do an example to illustrate how it works. 
Image that we want to perform descriptives (means, standard deviations, medians, frequencies, ...) for all the variables in the data set among different groups of patients depending on the year they were recruited (1995, 2000 or 2005). Also we desire to perform some statistical test to assess if there are differences among these groups for each variable. \\



\subsection{{\tt compareGroups} function}

First we use the {\tt compareGroups} function. 

There are two ways of using it:
by typing a data.frame containing the variables to be analysed, and a vector of the variable that defines the groups:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
res<-compareGroups(regicor[,-which(names(regicor)=='year')],regicor$year)
res
@
\color{red}
\tiny
<<echo=FALSE>>=
res<-compareGroups(regicor[,-which(names(regicor)=='year')],regicor$year)
res
@
\color{black}
\normalsize





\noindent or a second way to obtain the same results, and easier to type, by a formula similar to {\tt glm} function.

\color{blue}
<<echo=TRUE>>=
res<-compareGroups(year~.,data=regicor)
@
\color{black}


In the left side of the formula, the grouping variable plays the rule of a response, and the variables from we want to compute the descriptives are the predictors. Note that typing a point in the right side of the formula, all variables of the data will be included in the analysis. Also, by typing a variable preceded by '-' makes that it will be removed from the analysis. In this way, we might want to remove the variable 'id':


\color{blue}
<<echo=TRUE>>=
res<-compareGroups(year~.-id,data=regicor)
@
\color{black}


In both cases, by specifying the data.frame or by typing the formula, the results are stored in an object called 'res', which is of class 'compareGroups'. This class has its own method 'print', which displays a short summary of the results, with:
\begin{itemize}
\item the variable name (or label), 
\item the number of individuals or rows analysed (with non-missing data), 
\item the association p-value which is the result of testing whether there are difference among groups,
\item the method which indicates whether the variable has been treated as categorical, normal distributed or continuous-non-normal distributed, 
\item and finally the individuals selected.
\end{itemize}



To obtained a more detailed results, the 'summary' method has been also implemented to a 'compareGroups' object which displays the descriptives of each variable by groups, showing the mean, or median, or frequencies as appropriate, and the p-values:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
summary(res)
@
\color{red}
\tiny
<<echo=FALSE>>=
summary(res)
@
\normalsize
\color{black}


In this example, because there are more than 2 groups to compare, another p-values are computed: p-values of trend, and the pairwise p-values comparing 2 by 2 each of the 3 groups. Because the multiple test issue, these pairwise p-values are corrected properly by Benjamini \& Hochberg method \cite{BH}.



\subsection{Changing options}

The previous results are the ones obtained by default settings.
For example, continuous variables can be treated as normal distributed, in which case the mean and standard deviation are displayed, or as a non-normal distributed, in which case the median and quartiles are displayed.
By default, all continuous variables are treated as normal distributed. If we want to perform a test to assess whether a continuous variable is normal or non-normal distributed by the Shapiro-Wilks test, we can change the 'method' argument to NA.

Also, we can use the generic function {\tt plot}. Doing this, normality plots are displayed for all continuous variables. Note that this can be done only for Windows.

For example if we want to set some variables as non-normal, maybe after seeing a normality plot or after performing a test, we want to treat some variables as non-normal distributed: for example the triglycerides (variable number 10 in the table):

\color{blue}
<<echo=TRUE,eval=FALSE>>=
mm<-rep(1,length(res))
mm[10]<-2
update(res,method=mm)
@
\color{red}
\tiny
<<echo=FALSE>>=
mm<-rep(NA,length(res))
mm[10]<-2
update(res,method=mm)
@
\normalsize
\color{black}


or, easily and more intuitively, we can pass a named vector with the names of the variables we want to change:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
res<-update(res, method=c(triglyc=2))
res
@
\color{red}
\tiny
<<echo=FALSE>>=
res<-update(res, method=c(triglyc=2))
res
@
\normalsize
\color{black}



Because in the displayed results only the labels of the variables appear, there is a useful function ({\tt varinfo}) that prints the variable name and its label for all the analysed variables:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
varinfo(res)
@
\color{red}
\tiny
<<echo=FALSE>>=
varinfo(res)
@
\normalsize
\color{black}


Note also the use of function {\tt update}, which will be very useful when changing some options to previous analysis, in order to not having to type again all previous changes made.


%% selec %%%

Perhaps, we don't want to select all individuals for all variables. Maybe, for example, we need to report the descriptives of cholesterol and triglycerides only for the non-treated people. So, similar to 'method' argument, we specify this in the 'selec' argument typing the selection criteria in quotes:


<<echo=FALSE>>=
options(width=50)
@

\color{blue}
<<echo=TRUE,eval=FALSE>>=
res<-update(res,selec=c(chol="regicor$txchol=='No'",
hdl="regicor$txchol=='No'",
triglyc="regicor$txchol=='No'",ldl="regicor$txchol=='No'"))
res
@
\color{red}
\tiny
<<echo=FALSE>>=
options(width=140)
res<-update(res,selec=c(chol="regicor$txchol=='No'",hdl="regicor$txchol=='No'",triglyc="regicor$txchol=='No'",ldl="regicor$txchol=='No'"))
res
@
\normalsize
\color{black}


% repeated variables
Another possibility is to obtain results for a variable, and for the same variable selecting a subset of patients. In this case we want to analyse the same variable twice but with different subsets. For example, to obtain the descriptives of cholesterol for all individuals and for the non treated,  

\color{blue}
<<echo=TRUE,eval=FALSE>>=
update(res,year~.+chol,selec=c(chol.1="regicor$txchol=='No'"))
@
\color{red}
\tiny
<<echo=FALSE>>=
update(res,X=year~.+chol,selec=c(chol.1="regicor$txchol=='No'"))
@
\normalsize
\color{black}


Note that the name of the repeated variables have the appendix .1, (or .2, .3, etc. if there were more than 2 repeated variables).  \\



%%% changing grouping variable.

By updating the formula argument, it is easy to perform the analysis by groups of another variable, for example 'gender':

\color{blue}
<<echo=TRUE,eval=FALSE>>=
update(res,gender~.)
@
\color{red}
\tiny
<<echo=FALSE>>=
update(res,gender~.)
@
\normalsize
\color{black}


%%% subset %%%

Now, imagine we want to perform descriptives by 'year of recruitment' but stratifying by gender. So, we want a table for males and another one for females.

An easy way to do this is by changing the 'subset' argument as it is done with {\tt glm} for example.
So the results are computed for men and stored in an object called 'resmen':

\color{blue}
<<echo=TRUE,eval=FALSE>>=
resmen<-update(res,subset=gender=='Male')
resmen
@
\color{red}
\tiny
<<echo=FALSE>>=
resmen<-update(res,subset=gender=='Male')
resmen
@
\normalsize
\color{black}



\noindent and the same for women:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
reswom<-update(res,subset=gender=='Female')
reswom
@
\color{red}
\tiny
<<echo=FALSE>>=
reswom<-update(res,subset=gender=='Female')
reswom
@
\normalsize
\color{black}


Notice that p-value for variable gender cannot be computed since only one gender is present in each table.



%% formula %%

Variable gender makes no sense to appear since stratified analysis by gender are done. 
By taking advantage of the 'formula' usage, 'gender' can be removed by updating the formula argument

\color{blue}
<<echo=TRUE,eval=FALSE>>=
resmen<-update(resmen,.~.-gender)
resmen
@
\color{red}
\tiny
<<echo=FALSE>>=
resmen<-update(resmen,.~.-gender)
resmen
@
\normalsize
\color{black}




\subsection{Creating tables} \label{section-Creating tables}

Until now, we have explained how to compute the descriptives and p-values, and how to change some options in order to compute what is desired. But, no table has been displayed.
In this section functions to create descriptives by groups tables are shown.
Once the computations and their options are done (using the {\tt compareGroups}) function, then the function {\tt createTable} is applied.

\color{blue}
<<echo=TRUE,eval=FALSE>>=
restab<-createTable(res)
restab
@
\color{red}
\tiny
<<echo=FALSE>>=
restab<-createTable(res)
restab
@
\normalsize
\color{black}



The results have been stored in the object 'restab' which is of class 'createTable'. This class has a 'print' method which displays in the R console two tables: the first one with the descriptives and p-values in a 'nice' format, and the second one which shows the available data, the type of variable (categorical, normal or non-normal) and the individuals selection. \\


As for {\tt compareGroups} function, some options can be changed from {\tt createTable}, such as the number of decimals, or some columns to be shown or hide. For example, by default, the '[ALL]' column (the descriptives of all groups together) appears, and the trend p-value and pairwise p-values are hidden. To change some of these default options:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
restab<-update(restab,show.all=FALSE)
restab
@
\color{red}
\tiny
<<echo=FALSE>>=
restab<-update(restab,show.all=FALSE)
restab
@
\normalsize
\color{black}


\noindent or if we want the number of individuals analysed for each variable to appear in the table

\color{blue}
<<echo=TRUE,eval=FALSE>>=
update(restab,show.n=TRUE)
@
\color{red}
\tiny
<<echo=FALSE>>=
update(restab,show.n=TRUE)
@
\normalsize
\color{black}




%%% changing hide...

Finally, it might be interesting to hide some categories from the table. For example, for binary variables with categories 'Yes/No', it may be necessary not to report the 'No' category since it is redundant, and just showing the 'Yes' category it is enough: for example to report only the number of hypertensive individuals and not both (hypertensive and non-hypertensives), and the same for the rest of the 'Yes/No' variables of the table: 

\color{blue}
<<echo=TRUE,eval=FALSE>>=
restab<-update(restab, hide=c(histbp=2,txhtn=1,histchol=2,txchol=1))
restab
@
\color{red}
\tiny
<<echo=FALSE>>=
restab<-update(restab, hide=c(histbp=2,txhtn=1,histchol=2,txchol=1))
restab
@
\normalsize
\color{black}



             
\subsection{Exporting the tables}

Once all desired options after {\tt compareGroups} and {\tt createTable} has been set, then the table is ready to be exported in LaTex format. To do so, use {\tt export2latex} function:

\color{blue}
<<echo=TRUE,eval=FALSE>>=
export2latex(restab,file="C:/example/tables/table1")
@
\color{black}


%<<echo=TRUE>>=
%export2latex(restab,file="C:/compareGroups/compareGroups/inst/doc/tables/table1")
%@



Doing this, in the folder ''C:/example/tables'' there will be 2 files stored, one named ''table1.tex'' with the code of the descriptive table ready and another one named ''table1\_appendix.tex'' with the code of the ''data availability'' table, both files ready to be included in a LaTex file with the code of the main text.\\ 


In the {\tt compareGroups} package, there is also the possibility to export the tables in plain text, such as CSV format. The functionality is the same as for {\tt export2latex}, but with an extra argument to specify which is the variables separator (',' or ';') and the decimal separator ('.' or ','). This option is useful if the system is defined as comma decimals separators. In this case we may want to set the argument 'sep' to ';':
                                
\color{blue}
<<echo=TRUE,eval=FALSE>>=
export2csv(restab,file="C:/example/tables/table1",sep=";")
@
\color{black}

%%%%%%%%%%%%            

\newpage
%\begin{landscape}
\include{./tables/table1}
%\newpage
%\include{./tables/table1_appendix}
%\end{landscape}

As before, in the folder ''C:/example/tables'' there will be two files, one named ''table1.csv'' with the descriptive table and another named ''table1\_appendix.csv'' with the ''data availability'' table. 



\section{Using graphical user interface}\label{section-using graphical interface}

The graphical user interface (GUI) has been developed has been developed using the {\tt tcltk} package. The GUI pops up automatically after loading the {\tt compareGroups} package
\color{blue}
<<echo=TRUE,eval=FALSE>>=
library(compareGroups)
@
\color{black}
\noindent the GUI device is opened with the REGICOR data (described in the previous sections) loaded (see figure \ref{fig1}).\\

If the GUI has been closed, it can be reopened again by typing
\color{blue}
<<echo=TRUE,eval=FALSE>>=
cGroupsGUI()
@
\color{black}
In this case the REGICOR data set is loaded. If one desires to work with another data set existing in the workspace (named exampData, for example) type
\color{blue}
<<echo=TRUE,eval=FALSE>>=
cGroupsGUI(exampData)
@
\color{black}
However, we continue illustrating how to use the GUI with the REGICOR data set. \\
         
\begin{figure}[!h]
\caption{}\label{fig1}
\includegraphics[width=1.1 \textwidth]{./figures/fig1}
\end{figure}

In the first device of the GUI (see figure \ref{fig1}) you can see differents frames and buttons where the user can specify the options to build the tables. Following there is a description of each of them:

\begin{description}
  \item[Load Data] This allows the user to load the data frame stored in either {\tt R} format or SPSS format. This opens a browser to search the data file in a folder (see figure \ref{fig5}).
  \item[Variables in data frame] This is a list with all variables names of the loaded data. Note that variables that are not numeric, character or factor don't appear in the list. Also the numeric with less than 6 different values, character or factor variables has an appendix (CAT) indicating that they will be treated as categorical variables.
  \item[Factor to report] This allows the user to select the grouping variable. There is a button ('Factor Plot') which plots the frequency of each group.
  \item[Variables to report] This allows the user to select the row variables (the variables analysed). Clicking on variable/s of the row variable list first and then selecting the method, the user can specify the type (normal, non-normal or categorical) for the continuous variables. If 'Test (S-W)' is selected, a Shapiro-Wilks test is performed to decide if the variable is normal or not (the significance treshold for this test can be changed in 'Significance level for S-W test'), but if the variable has less than 6 different values then it is treated as categorical.
  \item[Subset of global data frame] A logical expression written as usual may be typed by the user, or left in blank. In the last case all the individuals in the data frame are selected, and in the first case only the individuals that match the condition criteria expression are included in the analysis. Note that is not necessary to specify the data frame in typing the expression. Also there is a button ('Apply subset') to check if the expression is correct, and it is necessary to press it to apply the desired individuals filter.
  \item[Plot] If 'Univariate' is selected, a normality plot is performed for continuous variables and frequency bar plot for categorical variables. If 'bivariate' is selected, a box plot stratified by groups is performed for continuous variables and a bar plot stratified by groups is performed for categorical variables. Only one variable can be selected from 'Variables to report' list.
  \item[Next] By pressing this button, the next device is opened (see figure \ref{fig2})
\end{description}

In the shown example the variables age, smoker, txhtn, chol, hdl and triglyc will be described by groups of gender from the REGICOR data set. The variable triglyc will be treated as non-normal and the rest of continuous variable as normal. Also only individuals with bmi greater than 18 will be analysed.


\begin{figure}[!h]   
\caption{}\label{fig2}
\includegraphics[width=1.1 \textwidth]{./figures/fig2}
\end{figure}

As for the first device, all the frames and buttons of the second device (see figure \ref{fig2}) are described below:

\begin{description}
  \item[Variables to report] Is the same list of the first device where the continuous variables have an appendix indicating their type. If the type for a continuos variable was not specified in the first device this will be normal. The appendix for the type codes are  (NORM) for normal, (NNORM) for continuous non-normal and (CAT) for categorical.
  \item[General options] Here you can specify the number of decimals digits, if the p-value for trend will appear or not, if the multiple comparisons (pairwise) p-values will appear or not, the variable separator character for csv files, if the number of individuals analysed will appear or not, and if the [ALL] column (descriptives without stratifying by groups) will appear or not.
  \item[Options for (CAT) variables] Here the user can specify for each of the categorical variables the category that will not appear in the table. If 'No Category' is selected (default option) all categories will be displayed. Also the 'Check Category' option performs a plot to see which categories the variable contains. With specifying 'Type', the user can choose whether the absolute and relative are displayed ('n (\%)') or only the relative frequencies ('\%'). 
  \item[Checking] By pressing this button, a summary of variable parameters selected (decimals digits, subset\ldots) is shown (see figure \ref{fig3}). It doesn't allow to change options, it is only informative.
  \item[Create] By pressing this button, a browser pops up allowing the user to specify the name of the file and the folder where to save the resulting tables in LaTeX and CSV format (see figure \ref{fig4}). Note that the file name must not have extension.  
  \end{description}
  
  In the example, the default number of decimals will be displayed, which means 0 decimals for numbers greater than 100, 1 decimal for numbers between 10 and 100, 2 decimals for numbers between 0 and 10 and 3 decimals for numbers smaller than 0. Also p-value for trend  and pairwise p-values are not displayed and they can not be shown since there are only 2 groups in the grouping variable. But the number of analysed individuals and the [ALL] column will be displayed in the table. For the categorical variables, all the categories will be displayed  and the abosulte and relative frequencies will appear. Finally, the resulting CSV table will be saved with the comma variable separator format.

\begin{figure}[!h]
\caption{}\label{fig3}
\includegraphics[width=1.1 \textwidth]{./figures/fig3}
\end{figure}


\begin{figure}[!h]
\caption{}\label{fig4}
\includegraphics[width=1.0 \textwidth]{./figures/fig4}
\end{figure}

\begin{figure}[!h]
\caption{}\label{fig5}
\includegraphics[width=1.0 \textwidth]{./figures/fig5}
\end{figure}


\clearpage
\bibliographystyle{plain}
\bibliography{compareGroups_vignette}



\end{document}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%